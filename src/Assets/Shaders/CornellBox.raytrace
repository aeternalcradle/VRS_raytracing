#pragma max_recursion_depth 11

#include "./Common.hlsl"
#include "./PRNG.hlsl"

#define MAX_DEPTH (10)
#define NUM_OF_SAMPLES (1)

RWTexture2D<float4> _OutputTarget;
float4 _OutputTargetSize;
int _FrameIndex;
TEXTURE2D(_HistoryColor);
SAMPLER(sampler_HistoryColor);

// normal history buffers
RWTexture2D<float4> _NormalTarget;
TEXTURE2D(_HistoryNormal);
SAMPLER(sampler_HistoryNormal);

// per-pixel history count buffers
RWTexture2D<float> _CountTarget;
TEXTURE2D(_HistoryCount);
SAMPLER(sampler_HistoryCount);

// base color history buffers
RWTexture2D<float4> _BaseColorTarget;
TEXTURE2D(_HistoryBaseColor);
SAMPLER(sampler_HistoryBaseColor);

// normal validation threshold (cosine of angle)
#define NORMAL_REPROJ_COS_THR (0.90f)
// base color similarity threshold (L2 distance in [0,1] space)
#define BASECOLOR_DIFF_THR (0.10f)
// per-pixel count clamp to keep responsiveness
#define COUNT_NMAX (256.0f)

[shader("raygeneration")]
void CornellBoxGenShader()
{
  const uint2 dispatchIdx = DispatchRaysIndex().xy;
  const uint PRNGIndex = dispatchIdx.y * (int)_OutputTargetSize.x + dispatchIdx.x;
  uint4 PRNGStates = _PRNGStates[PRNGIndex];

  float4 finalColor = float4(0, 0, 0, 0);
  float hitT = -1.0f;
  float3 rayOrigin = 0;
  float3 rayDirection = 0;
  float3 curNormalWS = 0;
  float3 curBaseColor = 0;
  {
    float3 origin;
    float3 direction;
    float2 apertureOffset = GetRandomInUnitDisk(PRNGStates);
    float2 offset = float2(GetRandomValue(PRNGStates), GetRandomValue(PRNGStates));
    //这里用了taa的办法，每一个像素不再是中心点发射光线，而是类似于msaa的多个覆盖，解决锯齿问题，但是后续引入的重投影发生冲突，暂时弃用。
    //GenerateFocusCameraRayWithOffset(origin, direction, apertureOffset, offset);
    GenerateCameraRay(origin,direction);

    RayDesc rayDescriptor;
    rayDescriptor.Origin = origin;
    rayDescriptor.Direction = direction;
    rayDescriptor.TMin = 1e-5f;
    rayDescriptor.TMax = _CameraFarDistance;

    RayIntersection rayIntersection;
    rayIntersection.remainingDepth = MAX_DEPTH - 1;
    rayIntersection.PRNGStates = PRNGStates;
    rayIntersection.color = float4(0.0f, 0.0f, 0.0f, 0.0f);
    rayIntersection.hitT = -1.0f;
    rayIntersection.normalWS = 0;
    rayIntersection.baseColor = 0;

    TraceRay(_AccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, rayDescriptor, rayIntersection);
    PRNGStates = rayIntersection.PRNGStates;
    finalColor += rayIntersection.color;
    hitT = rayIntersection.hitT;
    rayOrigin = origin;
    rayDirection = direction;
    curNormalWS = normalize(rayIntersection.normalWS);
    curBaseColor = rayIntersection.baseColor;
  }
  finalColor = float4(sqrt(finalColor.r), sqrt(finalColor.g), sqrt(finalColor.b), finalColor.a);

  // write current normal (w=1 means valid when hit)
  float4 normalOut = (hitT > 0.0f) ? float4(curNormalWS, 1.0f) : float4(0, 0, 0, 0);
  _NormalTarget[dispatchIdx] = normalOut;
  // write current base color (w=1 means valid when hit)
  float4 baseColorOut = (hitT > 0.0f) ? float4(curBaseColor, 1.0f) : float4(0, 0, 0, 0);
  _BaseColorTarget[dispatchIdx] = baseColorOut;

  // initialize per-pixel count for temporal pass
  float outCount = (hitT > 0.0f) ? 1.0f : 0.0f;
  _CountTarget[dispatchIdx] = outCount;

  _PRNGStates[PRNGIndex] = PRNGStates;

  finalColor.a = max(0.0f, hitT);
  _OutputTarget[dispatchIdx] = finalColor;
}

[shader("miss")]
void MissShader(inout RayIntersection rayIntersection : SV_RayPayload)
{
  rayIntersection.color = float4(0.0f, 0.0f, 0.0f, 1.0f);
  rayIntersection.hitT = -1.0f;
}
